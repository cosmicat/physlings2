::DESIGN::

::TRIGGERS::
-when conditions are met, causes action to happen
-may have parameters
	-e.g. contact trigger, takes a TARGET of type ball or platform as a parameter
	-e.g. timer trigger, takes repeat (int) and time (float) as a parameter
-has an action stack
	
::CONDITIONAL::
-delegate that returns true or false

::LIST OF PROPERTIES::
-TODO



::TARGETS:
-defines an interface of getters and setters on properties above
	-getter returns null if property does not exist
	-setter returns false if property does not exist
	
-where to get targets
	-global
		-all balls
		-oldest/newest ball
	-produced by triggers	
		-e.g. contact produces a ball as a target
	-inputs to triggers
		-e.g. a platform on a contact trigger
	-produced by actions
		-e.g. duplicate produces a ball target
	-manually specified

-examples
	-ball
		-bounciness (need to decide how bounce combines with platforms)
		-mass
		-force/velocity
		-position
		-ignore gravity
		-assosciated bounce trigger
	-platform
		-bounciness (combine is always average, so ball bounciness can override platform bounciness but not the other way around) 
		-friction
		-position
		-orientation
		-assosciated bounce trigger

::GLOBAL PROPERTIES::
-gravity (get, set)
-number of balls (get)
-game time (get)

::ACTIONS::
-may have conditionals (action does not trigger if condition is not met)
:STACK:
-actions come in a stack and each action gets triggered in order and may effect the next action (e.g. via the target stack)
:EXAMPLES:
-ball actions
	-extra bounce (amount)
	-teleport (location (could be anything TARGET with position property), orientation)
	-change ball property (property, change)
		-make bouncy/not bouncy (bounce = 1, combine = max), (bounce = 0, combine = min)
		-make more/less bourcy (bounce = 1/0, combine = avg)
		-make high friction
	-duplicate (count) (outputs target)
	-destroy
-platform actions
	-switch on/off
	-change/swap action
	-change property (property, change)
		-change rotation
		-move
		-bounciness (bounce = value, combine = avg)
-global actions
	-move stage element (element, position)
	-change gravity
	-destroy all balls (this is actually described by the destroy action and the all balls target)
-other
	-store object (is put on top of target stack)

	
::QUESTIONS::
-visual encoding of the above information 